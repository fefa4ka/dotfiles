#!/bin/sh

prompt_install() {
	echo -n "$1 is not installed. Would you like to install it? (y/n) " >&2
	old_stty_cfg=$(stty -g)
	stty raw -echo
	answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
	stty $old_stty_cfg && echo
	if echo "$answer" | grep -iq "^y" ;then
		# This could def use community support
		if [ -x "$(command -v apt-get)" ]; then
			sudo apt install $1 -y

		elif [ -x "$(command -v brew)" ]; then
			brew install $1

		elif [ -x "$(command -v pkg)" ]; then
			sudo pkg install $1

		elif [ -x "$(command -v pacman)" ]; then
			sudo pacman -S $1

		else
			if echo "$OSTYPE" | grep -iq "linux-gnu"; then
				echo "ok"
			elif echo "$OSTYPE" | grep -iq "darwin"; then
				sh -c "$(curl -fsSL https://raw.githubusercontent.com/guarinogabriel/mac-cli/master/mac-cli/tools/install)"
				mac update
				brew install mas
				brew install alacritty
				mas lucky Vimari
				mas lucky HazeOver
				brew install koekeishiya/formulae/yabai
				brew install koekeishiya/formulae/skhd
				brew install cmacrae/formulae/spacebar
				# Install cask repository
				brew tap caskroom/fonts

				# Install fonts
				brew cask install font-fira-code
				brew cask install font-firacode-nerd-font
				brew cask install font-firacode-nerd-font-mono
				brew cask install font-hack-nerd-font
				brew cask install font-hack-nerd-font-mono
				brew cask install font-sourcecodepro-nerd-font
				brew cask install font-sourcecodepro-nerd-font-mono
			fi
			echo "I'm not sure what your package manager is! Please install $1 on your own and run this deploy script again. Tests for package managers are in the deploy script you just ran starting at line 13. Feel free to make a pull request at https://github.com/parth/dotfiles :)"
		fi
	fi
}

check_for_software() {
	echo "Checking to see if $1 is installed"
	if ! [ -x "$(command -v $1)" ]; then
		prompt_install $1
	else
		echo "$1 is installed."
	fi
}

check_default_shell() {
	if [ -z "${SHELL##*zsh*}" ] ;then
			echo "Default shell is zsh."
	else
		echo -n "Default shell is not zsh. Do you want to chsh -s \$(which zsh)? (y/n)"
		old_stty_cfg=$(stty -g)
		stty raw -echo
		answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
		stty $old_stty_cfg && echo
		if echo "$answer" | grep -iq "^y" ;then
			chsh -s $(which zsh)
		else
			echo "Warning: Your configuration won't work properly. If you exec zsh, it'll exec tmux which will exec your default shell which isn't zsh."
		fi
	fi
}

echo "We're going to do the following:"
echo "1. Check to make sure you have zsh, vim, and tmux installed"
echo "2. We'll help you install them if you don't"
echo "3. We're going to check to see if your default shell is zsh"
echo "4. We'll try to change it if it's not"

echo "Let's get started? (y/n)"
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	echo
else
	echo "Quitting, nothing was changed."
	exit 0
fi


# Minimal
check_for_software zsh
echo
check_for_software neovim
echo
check_for_software tmux
echo
check_for_software tmuxinator
echo
check_for_software lnav
echo
check_for_software fzf
echo

# Pretty basic
check_for_software exa
echo
check_for_software bat
echo

# Terminal
check_for_software alacritty
echo

# Useful tools
check_for_software thefuck
echo
check_for_software tldr
echo
check_for_software lazygit
echo

check_default_shell

echo
echo -n "Would you like to backup your current dotfiles? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	mv ~/.zshrc ~/.zshrc.old
	mv ~/.tmux.conf ~/.tmux.conf.old
	mv ~/.config/nvim/init.vim ~/.config/nvim/init.vim.old
else
	echo -e "\nNot backing up old dotfiles."
fi

git submodule update --init --recursive

# Vim Plugins
# ccls
# bash lang
npm install -g dockerfile-language-server-nodejs

printf "source '$HOME/dotfiles/zsh/zshrc_manager.sh'" > ~/.zshrc
printf "so $HOME/dotfiles/nvim/init.vim" > ~/.config/nvim/init.vim
printf "source-file $HOME/dotfiles/tmux/tmux.conf" > ~/.tmux.conf

echo
echo "Please log out and log back in for default shell to be initialized."
